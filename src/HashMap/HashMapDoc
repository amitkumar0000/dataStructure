How HashMap Work Internally
----------------------------
Internally HashMap is array of Node.
Class Node {
    int hash;
    K Key;
    V value;
    Node next;
}

Performance of HashMap
====================
Depends upon:- 1. Initial Capacity
               2. Load Factor.
                    Load Factor is a measure when rehashing will happen. Rehashing means increasing the capacity.
                    Its values varies between 0 to 1.

Hashing Get and Put Method
----------------------------
Put method
-----------
  1.Calculate HashCode of Key say 118
  2. Calculate index by index method  e.g  index = hashcode(key) & n-1   n=16   index will be 6
  3.create a node object
  node{
    hashcode = 118
    key
    value
    node next = null
  }
  4. place the node object at index 6 . if no object is present add this.
     if object is present
        check key are same via hashcode and equal method
            if key are same then replace the object value.
            else connect the object as linked list

Get Method
-----------
  1. Calculate hashcode of key. say hashcode 118
  2. Calculate index by index method  e.g index = hashcode(key) & n-1 n=16 index=6
  3. Go to index 6. if key is same return the value.
    else check the next object in linked-list


HashMap Changes in Java 8
==========================
As we know now that in case of hash collision entry objects are stored as a node in a linked-list
and equals() method is used to compare keys.
That comparison to find the correct key with in a linked-list is a linear operation
so in a worst case scenario the complexity becomes O(n).
To address this issue, Java 8 hash elements use balanced trees instead of linked lists after a certain threshold is reached.
Which means HashMap starts with storing Entry objects in linked list
but after the number of items in a hash becomes larger than a certain threshold,
the hash will change from using a linked list to a balanced tree,
which will improve the worst case performance from O(n) to O(log n).


Important Points
------------------
Time complexity is almost constant for put and get method until rehashing is not done.
In case of collision, i.e. index of two or more nodes are same, nodes are joined by link list
 i.e. second node is referenced by first node and third by second and so on.
If key given already exist in HashMap, the value is replaced with new value.
hash code of null key is 0.
When getting an object with its key, the linked list is traversed until the key matches or null is found on next field.






